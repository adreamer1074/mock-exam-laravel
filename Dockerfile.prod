# Stage 1: Composer dependencies
FROM php:8.3-cli-alpine as vendor
# Composerを手動インストール (このステージでのみ有効)
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
WORKDIR /app
COPY composer.json composer.lock ./
RUN composer install --no-dev --optimize-autoloader --no-scripts

# Stage 2: Laravel application
FROM php:8.3-fpm-alpine

# ★★★ ここにComposerのインストールを追加します ★★★
# Composerを手動インストール (このステージでのみ有効)
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# 必要なPHP拡張機能
RUN apk add --no-cache \
    bash \
    curl \
    libpng-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    libzip-dev \
    zip \
    unzip \
    oniguruma-dev \
    && docker-php-ext-install pdo_mysql mbstring zip

# Node.js, npm, etc（必要に応じて）
# RUN apk add --no-cache nodejs npm

WORKDIR /var/www/html

# アプリケーションコピー
COPY . .

# Composer install (vendor ディレクトリは Stage 1 からコピーされる)
COPY --from=vendor /app/vendor ./vendor

# パーミッション調整
RUN chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache

# ★★★ Composerのオートローダーを再生成（composer コマンドが利用可能になった後） ★★★
RUN composer dump-autoload --no-dev --optimize

# キャッシュをクリア（Package Discoveryキャッシュも含む）
RUN php artisan optimize:clear


EXPOSE 9000

CMD ["php-fpm"]